name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    # Caching disabled due to conflicts in concurrent jobs
    # Go modules download is fast enough without caching
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -short -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run: go fmt ./..."
          gofmt -s -l .
          exit 1
        fi

  build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: "-linux-amd64"
          - goos: linux
            goarch: arm64
            suffix: "-linux-arm64"
          - goos: darwin
            goarch: amd64
            suffix: "-macos-amd64"
          - goos: darwin
            goarch: arm64
            suffix: "-macos-arm64"
          - goos: windows
            goarch: amd64
            suffix: "-windows-amd64.exe"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    # Caching disabled due to conflicts in concurrent matrix jobs
    # Go modules download is fast enough without caching
    
    - name: Download dependencies
      run: go mod download
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        mkdir -p build
        go build -ldflags "-s -w -X main.version=${GITHUB_SHA::8}" -o build/spotify-shuffle${{ matrix.suffix }} .
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: spotify-shuffle${{ matrix.suffix }}
        path: build/spotify-shuffle${{ matrix.suffix }}
        retention-days: 7

  tag:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Generate version tag
      id: version
      run: |
        # Get the latest tag, if any
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        VERSION=$(echo $LATEST_TAG | sed 's/^v//')
        MAJOR=$(echo $VERSION | cut -d. -f1)
        MINOR=$(echo $VERSION | cut -d. -f2)
        PATCH=$(echo $VERSION | cut -d. -f3)
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Create and push tag
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}
    
  create-release:
    runs-on: ubuntu-latest
    needs: [test, build, tag]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        # Pull the latest tags including the one just created
        ref: main
    
    - name: Pull latest tags
      run: git fetch --tags
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Download dependencies
      run: go mod download
    
    # Build binaries for release
    - name: Build all release binaries
      run: |
        mkdir -p release-assets
        
        # Build for all platforms
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
        
        for platform in "${platforms[@]}"; do
          os=$(echo $platform | cut -d'/' -f1)
          arch=$(echo $platform | cut -d'/' -f2)
          
          if [ "$os" = "windows" ]; then
            suffix="-windows-$arch.exe"
          else
            suffix="-$os-$arch"
          fi
          
          echo "Building for $os/$arch..."
          GOOS=$os GOARCH=$arch CGO_ENABLED=0 go build \
            -ldflags "-s -w -X main.version=${{ needs.tag.outputs.version }}" \
            -o "release-assets/spotify-shuffle$suffix" .
          
          # Create checksum
          cd release-assets
          if [ "$os" = "darwin" ]; then
            shasum -a 256 "spotify-shuffle$suffix" > "spotify-shuffle$suffix.sha256"
          else
            sha256sum "spotify-shuffle$suffix" > "spotify-shuffle$suffix.sha256"
          fi
          cd ..
        done
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.tag.outputs.version }}
        name: Release ${{ needs.tag.outputs.version }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: release-assets/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}